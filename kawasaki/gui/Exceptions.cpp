#include "Exceptions.h"


//-------------------------------------------------------------------------------------------------
Exception::Exception(QString sMsg)
    :std::exception()
    ,m_sMsg(sMsg)
{}

//-------------------------------------------------------------------------------------------------
Exception::~Exception() throw()
{}

//-------------------------------------------------------------------------------------------------
const QString& Exception::getMessage() const throw()
{
    return m_sMsg;
}

//-------------------------------------------------------------------------------------------------
void Exception::setMessage(const QString &sMsg)
{
    m_sMsg = sMsg;
}

//-------------------------------------------------------------------------------------------------
const char* Exception::what() const throw()
{
    return "";
}

//-------------------------------------------------------------------------------------------------
//
// FileIOException
//
//-------------------------------------------------------------------------------------------------

FileIOException::FileIOException(QString sMsg)
    :Exception(sMsg)
{}

//-------------------------------------------------------------------------------------------------
FileIOException::~FileIOException() throw()
{}

//-------------------------------------------------------------------------------------------------
//
// Internal Error
//
//-------------------------------------------------------------------------------------------------

InternalError::InternalError(QString sMsg)
    :Exception(sMsg)
{}

//-------------------------------------------------------------------------------------------------
InternalError::~InternalError() throw()
{}

//-------------------------------------------------------------------------------------------------
//
// Internal Error
//
//-------------------------------------------------------------------------------------------------

LuaException::LuaException(QString sMsg)
    :Exception(sMsg)
    ,m_sModule()
    ,m_nLine(-1)
    ,m_pFile(NULL)
{
    // todo: tokenizer to cut string into three parts
    int i1 = sMsg.indexOf(':', 0);
    int i2 = sMsg.indexOf(':', i1+1);
    if (i1!=-1 && i2!=-1)
    {
        m_nLine = sMsg.mid(i1+1, i2-i1-1).toInt();
        m_sMsg  = sMsg.mid(i2+1, sMsg.length()-i2-1).trimmed();
    }
}

//-------------------------------------------------------------------------------------------------
LuaException::~LuaException() throw()
{}

//-------------------------------------------------------------------------------------------------
int LuaException::getLine() const
{
    return m_nLine;
}

//-------------------------------------------------------------------------------------------------
const IFile* LuaException::getFile() const
{
    return m_pFile;
}

//-------------------------------------------------------------------------------------------------
void LuaException::setFile(const IFile *pFile)
{
    m_pFile = pFile;
}

//-------------------------------------------------------------------------------------------------
const QString& LuaException::getModule() const
{
    return m_sModule;
}
